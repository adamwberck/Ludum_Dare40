<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sAttacker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-200</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables

event_inherited();




image_speed = 2;

dangerous=true;
ledgeTurnAround=false;
MAXHP=3
hp=MAXHP//100+random_range(-20,20);

damaged=false;

// Inherit Entity
event_inherited();
dir = -1;
facing = 1;

hit = false;
// Movement ///////////////////////////////////////////////////////////////////

airAccel    = 0.50;
airFric     = 0.00;
airSkid     = 0.00;
vxMax       = 5.00;

YAccel =  airAccel;
YFric  =  airFric;
YSkid  =  airSkid;
vyMax  =  vxMax;


slope       = 0   ;
groundAccel = 2.5;
dSlopeAccel = 1/8 ;
vxAccelSlide= 1/8 ;
groundFric  = 1/15;
groundSkid  = 2.5 ;

vxMaxSprint = 1.5;
vxMaxUp     = 2.50;
vxMaxSlide  = 3+15/16;
jumpHeight  = 9.00;
gravNorm    = 5/16;
walk        = false;
slide       = false;


gravSlide   = 2.5/16; 
clingTime   = 4.0;
// Misc ///////////////////////////////////////////////////////////////////////
sprint = 0;
sprintTimer = false;
state = scRight;
// Actions
IDLE      = 10;
RUN       = 11;
JUMP      = 12;
SKID      = 13;
SPRINT    = 14;
SLIDE     = 15;
// Initialize properties
action  = IDLE;
facing = image_xscale; // Change xscale in editor to adjust initial facing


//DRAWING
// For squash + stretch
xscale = 1;
yscale = 1;

//roating
rotate = 0
slideTime = 0
///////////////////////////////////////////////////////////////////////////////

// Legacy code, haha
sticking = false
prevNextTo = false
teststring = ""
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init extra
path = path_add();

pos =1;

xx= path_get_point_x(path,pos);
yy= path_get_point_y(path,pos);

pMov=true;

spd=.75;

wack=true;
alarm0=false;
wackO=noone;

stop=true;
dangerous=false;
alarm[0]=60;


found=false;
target=noone;

charge=true;
alarm1=false;

alarm[2]=180;
delay = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///clean up
if(instance_exists(target)){
    if(target.object_index==oNode){
        instance_destroy(target);
    }
}
path_delete(path);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Corpse
instance_create(x,y,oDeadGhost);
audio_play_sound(pop,1,false);
var r = random_range(0,100);
if(r&gt;30){
    var items = ds_list_create();
    ds_list_add(items,oCoin);
    ds_list_add(items,oHeart);
    ds_list_add(items,oArrowDrop);
    ds_list_add(items,oBombDrop);
    ds_list_shuffle(items);
    var index = ds_list_find_value(items,0);
    instance_create(x,y,index);        
    ds_list_destroy(items);
    var num = irandom_range(1,2);
    for(var i=0;i&lt;num;i++){
        instance_create(x+random_range(0,8),
                        y+random_range(0,8),index);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>delay = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>charge = !charge;
alarm1 = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start again
stop=false;
dangerous=true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/FreezeCheck
if(scFreezeCheck() == true) {path_end() exit};
if(scPauseCheck()  == true) {path_end() exit};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if player is in room
if(!scInView()){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement with collision
// Handle sub-pixel movement
cx += vx;
cy += vy;
vxNew = round(cx);
vyNew = round(cy);
cx -= vxNew;
cy -= vyNew;

jumped = false;
landed = false;

var isShell = object_get_name(object_index)==("oShell") 
    || object_get_name(object_index)==("oShellR");

//verticle movement
var y1 = floor(y / view_hview) * view_hview+16;
var y2 = y1+view_hview-32;
repeat(abs(vyNew)) {
    if (!PlatformCheck()&amp;&amp;y+sign(vy)&gt;y1&amp;&amp;y+sign(vy)&lt;y2){
        y += sign(vy);
    } else {
        vy = 0;
        onGround = true;
        break;
    }
}

if (platformTarget) {
    if (!onGround)
        landed = true;
    
    if (landed)
        with (platformTarget) other.vy = 0;
    else
        with (platformTarget) other.vy = 0;
}

//x movement as well as handling slopes
var x1 = floor(x / view_wview) * view_wview+16
var x2 = x1+view_wview-32;
r=0;
q=0;
var shell;
repeat(abs(vxNew)) {
    //var w=0, e=0;
    moved = false;
    q = sign(vx);
    while (abs(q) &lt; 2){
        r = 5;
        repeat(10){
            if (!place_meeting(x+q,y+r,oParSolid) &amp;&amp; x+q&gt;x1 &amp;&amp; x+q&lt;x2){
            //only move if place is free
                if (r &lt;= 0 || place_meeting(x,y+1,oParSolid)||place_meeting(x,y+1,oBrick)){
                //if onground or slope goes up then MOVE
                    if(place_meeting(x+q,y+r,oPlayer)){
                        var player = instance_place(x+q,y+r,oPlayer){
                            with(player) {
                                scPlayerHitCheck();
                            }
                        }
                    }
                    x += q;
                    y += r;
                    w += 1;
                    e -= r;
                    moved = true;
                    break;
                } 
            }
            if(place_meeting(x+q,y,oBrick)&amp;&amp;isShell){
                var brick = instance_place(x+q,y,oBrick){
                    with(brick) {
                        sidehit = true;
                    }
                }
            } 
            r -= 1;
        }
    q += sign(vx);
    }
    if (!moved){
        vx = 0;
        break;
    }
}

if (w&gt;=5) {
    slope = round(e/abs(w)*2)/2 ;
    w=0;
    e=0;
};

// Pit death
if (bbox_right &lt; 0 || bbox_left &gt; room_width || bbox_top &gt; room_height || bbox_bottom &lt; 0){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/FreezeCheck
if(scFreezeCheck() == true) {path_end() exit};
if(scPauseCheck()  == true) {path_end() exit};
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if player is in room
if(!scInView()){
    path_end()
    dangerous=false;
    stop = true;
    alarm[0]=60;
    if(instance_exists(target)){
        if(target.object_index!=oPlayer){
            instance_destroy(target);
    }
}
    exit;
}else if(stop){
    path_end()
    found=false;
    target=noone;
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Movementv3
// Apply the correct form of acceleration and friction


// Update
var fac=190;
if(instance_exists(oPlayer)){
    fac = abs(angle_difference(direction,
           point_direction(x,y,oPlayer.x,oPlayer.y)));
}
if(damaged){
    fac=0;
}
if(!collision_line(x,y,oPlayer.x,oPlayer.y,oBlock16,false,false)&amp;&amp;fac&lt;90){
    found=true;
}

if(target!=noone){
    if(place_meeting(x,y,target)&amp;&amp;target.object_index!=oPlayer){
        instance_destroy(target);
    }
}


if(found){
    if(!collision_line(x,y,oPlayer.x,oPlayer.y,oBlock16,false,false)){
        dir = point_direction(x,y,oPlayer.x,oPlayer.y);
        if(!delay&amp;&amp;!stop){
            var  arrow = instance_create(x+lengthdir_x(16,dir),
                        y+lengthdir_y(16,dir),oArrowEn);
            arrow.direction = point_direction(x,y,oPlayer.x,oPlayer.y);
            arrow.creator = id;
            delay = true;
            alarm[2] =180+irandom_range(0,10);
        }
        if(!instance_exists(target)||(target.object_index==oPlayer)){
            target = scRandomNode();
        }
        if(!alarm1){
            alarm1=true;
            alarm[1]=60;
        }
        if(charge){
            spd=.4;
        }else{
           spd=.0001;
        }
    }
    else{
        dir = direction;
        spd=.60;
        delay = true;
        target=oPlayer;
        //alarm[2] =180+irandom_range(0,10);
    }
    
}
else if(!instance_exists(target)){
    delay = true;
    alarm[2] =180+irandom_range(0,10);
    target = scRandomNode();
}


//Charge
if(!found){
    if(!alarm1){
        alarm1=true;
        alarm[1]=60;
    }
    if(charge){
        spd=.4;
    }else{
        spd=.0001;
    }
}
//Damage
if(damaged){//slow
    spd/=3;
}

damaged = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move on Path
if(instance_exists(target)){
    if (scr_Define_Path(target)) {
        path_start(path, spd, path_action_continue, 0);
    }
    else{
        path_end();
    }
}
else{
    path_end();
}
image_angle = direction;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Friction
vx=Approach(vx,0,groundFric);
vy=Approach(vy,0,groundFric);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Splosh
if(position_meeting(x,y,oWater)){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death?
if(hp&lt;=0)
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if player is in room
if(!scInView()){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sprite
draw_sprite_ext(sprite_index, image_angle/90, x, y, 1, 1, dir, c_white,1);
//draw_path(path,x,y,true);


/*
draw_set_colour(c_red);
draw_line(x-8,y,target.x-8,target.y);
draw_line(x+8,y,target.x+8,target.y);
draw_line(x,y-8,target.x,target.y-8);
draw_line(x,y+8,target.x,target.y+8);
/*
if(x&gt;oPlayer.x){
    image_xscale=-1;
}else{
    image_xscale=1;
}

draw_sprite_ext(sprite_index,image_index,x,y
    ,image_xscale,image_yscale,image_angle,0,1);

if(sprite_index=sGhost){
    draw_sprite_ext(sprite_index,image_index,x,y
        ,image_xscale,image_yscale,image_angle,c_white,illumination);
    if(foundPartner){
    draw_sprite_ext(sprite_index,image_index,x,y
        ,image_xscale,image_yscale,image_angle,c_blue,1);
        if(ambush){
        draw_sprite_ext(sprite_index,image_index,x,y
            ,image_xscale,image_yscale,image_angle,c_green,1);
        }
    }
}else{
    draw_sprite_ext(sprite_index,image_index,x,y
        ,image_xscale,image_yscale,image_angle,c_white,1);   
}

draw_set_font(smallDebug);

draw_text(x,y-20,round(lenX*10)/10)
draw_text(x,y-40,round(lenY*10)/10)
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>721</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_health</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>(hp/MAXHP)*100</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>723</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_health</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>x-8</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>y-10</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>x+8</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>y-10</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
var x1 = floor(x / view_wview) * view_wview
var y1 = floor(y / view_hview) * view_hview
var x2 = x1+view_wview;
var y2 = y1+view_hview;

draw_set_colour(c_white);
draw_rectangle(x1,y1,x2,y2,true);
draw_ellipse(x-40,y-40,x+40,y+40,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
