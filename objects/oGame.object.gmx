<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGame</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//randomize();
//random_set_seed(1);

display_set_gui_size(640,368);

window_set_size(640,368);


mute = false;

fullscreen = false;

rm     = -1;
rmPrev = -1;

// Camera /////////////////////////////////////////////////////////////////////

// Camera state
shake     = false;
babyshake = false;
xshake    = choose(-1, 1);
yshake    = choose(-1, 1);
shakeDist = 2;

// Camera offset
xcamo = 0;
ycamo = 0;


roomStart = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lx = 0;
ly = 0;

clickInit = mouse_check_button_pressed(mb_left)
clicked   = mouse_check_button(mb_left);

//room_set_background_colour(room, c_black,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>roomStart = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Turn off screenshake

shake     = false;
babyshake = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Camera

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Screenshake

var r;

r = 0;

// Screenshake
if (shake) {
    r = choose(-1, 1);
    
    if (r) {
        xcamo = xshake * shakeDist;
        ycamo = 0;
        xshake *= -1;
    } else {
        xcamo = 0;
        ycamo = yshake * shakeDist;    
        yshake *= -1;
    }
// Small screenshake
} else if (babyshake) {
    r = choose(-1, 1);
    
    if (r) {
        xcamo = xshake * shakeDist * 0.5;
        ycamo = 0;
        xshake *= -1;
    } else {
        xcamo = 0;
        ycamo = yshake * shakeDist * 0.5;    
        yshake *= -1;
    }
} else {
    xcamo = 0;
    ycamo = 0;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check Player

if (instance_number(oPlayer) &gt; 1) {
    with(instance_nearest(0,0,oPlayer))
        instance_destroy();
    }
/*
if (instance_number(oPlayer) &lt; 1) {
    instance_create(304,224,oPlayer)
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!instance_exists(oOrbR)&amp;&amp;room==rmFortySix){
    room_goto_next();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Prevent Dupes!
if(instance_number(oGame)&gt;1){
    instance_destroy();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Debug

if(!audio_is_playing(music)){
    audio_play_sound(music,50,true)
}


// Input variables for debug room traversal
/*
var kRestart, kExit, kPrev, kNext;

kRestart = keyboard_check_pressed(ord('R'));//    || gamepad_button_check_pressed(0, gp_select);
kExit    = keyboard_check_pressed(vk_escape);
kPrev    = keyboard_check_pressed(vk_pagedown);// || gamepad_button_check_pressed(0, gp_shoulderlb);
kNext    = keyboard_check_pressed(vk_pageup);//      || gamepad_button_check_pressed(0, gp_shoulderrb);
kLedge   = keyboard_check_pressed(ord('L'));
kLedgeM  = keyboard_check_pressed(ord('K'));

if(kLedge)
    oEnemyG.ledgecheck++;

if(kLedgeM)
    oEnemyG.ledgecheck--;
    
    
if (kRestart)
    room_restart();
if (kExit)
    game_end();
    
// Iterate through rooms backward
if (kPrev) {
    global.room_debug=room;
    if (room == room_first)
        room_goto(room_last);
    else
        room_goto_previous();
}

// Iterate through rooms forwards
if (kNext) {
    if (room == room_last)
        room_goto(room_first);
    else
        room_goto_next();
}

/// Debug for path based platform
if (mouse_check_button_pressed(mb_left)) {
    if (instance_exists(oPathMover)) {
        with (oPathMover) {
            plen = path_get_length(path);
            path_add_point(path, mouse_x - xstart, mouse_y - ystart, pSpd);
            plennew = path_get_length(path);
            
            pPos = pPos * (plen / plennew);
        }
    }
} 

if (mouse_check_button(mb_left)) {
    if (instance_exists(oPathMover)) {
        with (oPathMover) {
            plen = path_get_length(path);
            path_delete_point(path, path_get_number(path) - 1);
            plennew = path_get_length(path);
            pPos = pPos * (plen / plennew);
                        
            plen = path_get_length(path);
            path_add_point(path, mouse_x - xstart, mouse_y - ystart, pSpd);
            plennew = path_get_length(path);
            pPos = pPos * (plen / plennew);
            
            pMov = false;
        }
    }
} else {
    with (oPathMover)
        pMov = true;
}

with (oPathMover) {
    pSpd += (mouse_wheel_up() - mouse_wheel_down()) * 2;
    pSpd  = clamp(pSpd, 1, 16);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Mute

var kMute;

kMute  = keyboard_check_pressed(ord('M'));

if(kMute){
    mute = !mute;
}

if(mute){
   audio_master_gain(0);
}
else{
   audio_master_gain(1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
clickInit = mouse_check_button_pressed(mb_left)
clicked   = mouse_check_button(mb_left);

// INITIAL POINT
if (clickInit) {
    var dirToMouse = point_direction(oPlayer.x, oPlayer.y - 8, mouse_x, mouse_y);
    
    // Distance to contact point
    var i = 0;
    
    do {
        i++    
    } until (collision_line(oPlayer.x, oPlayer.y - 8, oPlayer.x + lengthdir_x(i, dirToMouse), (oPlayer.y - 8) + lengthdir_y(i, dirToMouse), oParSolid, false, true)); 
    
    lx = oPlayer.x + lengthdir_x(i, dirToMouse);
    ly = (oPlayer.y - 8) + lengthdir_y(i, dirToMouse);
// SECONDARY POINT(S)
}// else if (clicked) {
    var dirToMouse = point_direction(oPlayer.x, oPlayer.y - 8, mouse_x, mouse_y);
    
    // Distance to contact point
    var i = 0;
    
    do {
        i++    
    } until (collision_line(oPlayer.x, oPlayer.y - 8, oPlayer.x + lengthdir_x(i, dirToMouse), (oPlayer.y - 8) + lengthdir_y(i, dirToMouse), oParSolid, false, true)); 
    
    lx = oPlayer.x + lengthdir_x(i, dirToMouse);
    ly = (oPlayer.y - 8) + lengthdir_y(i, dirToMouse);
//}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause
if(keyboard_check_pressed(vk_escape)||gamepad_button_check_pressed(0,gp_start)){
    if(global.paused){
        global.paused=false;
    } else {
        global.paused=true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>rmPrev = rm;
rm     = room;

xcamo = 0;
ycamo = 0;

beginRoom = false;

if(!instance_exists(oBackround)){
    instance_create(0,0,oBackround);
}


//oPlayerStats.hp=4;

//thunderSound();

with(oPlayer){
    alarm[3] = 60;
    //global.freeze=true;
    roomStart = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Detele extra char
if(instance_number(oPlayer)&gt;1){
    instance_destroy(instance_find(oPlayer,2));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI DRAW!
if(roomStart &amp;&amp; instance_exists(oPlayer)){
    with(oPlayer){ alarm[3] = 60;}
    //global.freeze = true;
    

    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(font0);
    draw_text((view_xview+view_wview)/2,(view_yview+view_hview)/2,"Ready?");
    draw_set_font(font1);
    draw_text((view_xview+view_wview)/2,(view_yview+view_hview)*(3/4),
        "Press Any Key");
    
    
    
    var tgamepad = 
        gamepad_button_check_pressed(0, gp_face1)
        ||gamepad_button_check_pressed(0, gp_face2);
    
    
    if(keyboard_check_pressed(vk_anykey) 
        || tgamepad 
        || mouse_check_button_pressed(mb_any)){
        if(!beginRoom){
            beginRoom = true;
            alarm[1] = 24;
        }
    }
}

if(global.paused &amp;&amp; !roomStart &amp;&amp; !instance_exists(oMainMenu)){
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(font0);
    draw_text(room_width/2,room_height/2,"PAUSED");    
    draw_set_font(font1);
    draw_text(room_width/2,room_height/4*3,"Press Ctrl + Q to Quit");
    if(keyboard_check(vk_control)&amp;&amp;keyboard_check(ord('Q'))){
        room_goto(0);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///DON'T DRAW
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="120">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var screenWidth  = display_get_width() 
var screenHeight = display_get_height();


if !fullscreen
    {
    fullscreen = true;
    window_set_fullscreen(true);/*
    display_set_gui_size(screenWidth, screenHeight);
    surface_resize(application_surface, screenWidth, screenHeight);*/
    }
else
    {
    fullscreen = false;
    window_set_fullscreen(false);/*
    display_set_gui_size(window_get_width(), window_get_height());
    surface_resize(application_surface, window_get_width(), window_get_height());*/
    }
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
