<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sBrightBulb</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>10000</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/FreezeCheck
if(scFreezeCheck() == true) exit;
if(scPauseCheck()  == true) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flashlight
/*
if(instance_exists(oParEnemy)){
with(oParEnemy){
    draw_set_blend_mode( bm_add );
    var cone =  brightness/10;
    draw_triangle_colour(x,y,x+brightness*facing,y-cone,
        x+brightness*facing,y+cone,c_white,0,0,false);
    draw_set_blend_mode( bm_normal );
}
}
*/
if(instance_exists(oPlayer)){
    if(oPlayer.click &amp;&amp; oPlayer.brightness&gt;0)
    {
        with(oPlayer)
        {
            var tempBright = brightness;
            
            if(clickOne)
            {
                colorMouse = c_white;
                if(!audio_is_playing(buzz1)){
                    audio_play_sound(buzz1,34,true)
                    audio_stop_sound(buzz2);
                    audio_stop_sound(buzz3);
                }
            }
            else if(clickTwo)
            {
                colorMouse = c_yellow;
                tempBright+=10;
                if(!audio_is_playing(buzz2)){
                    audio_play_sound(buzz2,34,true)
                    audio_stop_sound(buzz1);
                }
            }

            
            if(oVirMouse.gamepad){
                var mouseX = oVirMouse.x;
                var mouseY = oVirMouse.y;
            } else {
                var mouseX = mouse_x;
                var mouseY = mouse_y;
            }
            
            var dir0 = (point_direction(oPlayer.x,oPlayer.y,mouseX,mouseY));
            
            var coneBright = tempBright;
            
            var blocked = false;
            var bLight = tempBright;
            for(var i=0;i&lt;tempBright;i+=1)
            {
                if(!blocked){
                    var X1 = x+lengthdir_x(i,dir0);
                    var Y1 = y+lengthdir_y(i,dir0);
                    var blocked = position_meeting(X1,Y1,oParSolid);
                    bLight = i;
                }
                else{
                    var test =0;
                }
            }
            tempBright = bLight;
        
            var cone = coneBright/10;
        
            var dir1 = (point_direction(oPlayer.x,oPlayer.y,mouseX,mouseY))+cone;
            var dir2 = (point_direction(oPlayer.x,oPlayer.y,mouseX,mouseY))-cone;
            
            var X1 = x+lengthdir_x(tempBright,dir1);
            var Y1 = y+lengthdir_y(tempBright,dir1);
            var X2 = x+lengthdir_x(tempBright,dir2);
            var Y2 = y+lengthdir_y(tempBright,dir2);
            
            
            draw_set_blend_mode( bm_add );
            draw_triangle_colour(x,y,X1,Y1,
                X2,Y2,colorMouse,0,0,false);
            
            var X1 = x+lengthdir_x(coneBright,dir1);
            var Y1 = y+lengthdir_y(coneBright,dir1);
            var X2 = x+lengthdir_x(coneBright,dir2);
            var Y2 = y+lengthdir_y(coneBright,dir2);
            
            draw_triangle_colour(x,y,X1,Y1,
                X2,Y2,c_gray,0,0,false);
            draw_set_blend_mode( bm_normal );   
        }
    }
    else
    {
        audio_stop_sound(buzz1);
        audio_stop_sound(buzz2);
        audio_stop_sound(buzz3);   
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
