<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sGhost</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ambush new
target =noone;
ambush = true;
randomMark  = (random_range(180,360)+180)%360;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables


event_inherited();

if(object_get_name(object_index)=="oGhost01"){
    //instance_create(x,y,oGhost03b);
    //happy=true;
    //instance_destroy();
}

image_speed = 2;

happy = false;

timerOn = false;


partner = 0;

dangerous=true;
ledgeTurnAround=false;
hp=100+random_range(-20,20);

damaged=false;

// Inherit Entity
event_inherited();
dir = -1;
facing = 1;

hit = false;
// Movement ///////////////////////////////////////////////////////////////////

airAccel    = 0.50;
airFric     = 0.00;
airSkid     = 0.00;
vxMax       = 5.00;

YAccel =  airAccel;
YFric  =  airFric;
YSkid  =  airSkid;
vyMax  =  vxMax;


slope       = 0   ;
groundAccel = 2.5;
dSlopeAccel = 1/8 ;
vxAccelSlide= 1/8 ;
groundFric  = 1/15;
groundSkid  = 2.5 ;

vxMaxSprint = 1.5;
vxMaxUp     = 2.50;
vxMaxSlide  = 3+15/16;
jumpHeight  = 9.00;
gravNorm    = 5/16;
walk        = false;
slide       = false;


gravSlide   = 2.5/16; 
clingTime   = 4.0;
// Misc ///////////////////////////////////////////////////////////////////////
sprint = 0;
sprintTimer = false;
state = scRight;
// Actions
IDLE      = 10;
RUN       = 11;
JUMP      = 12;
SKID      = 13;
SPRINT    = 14;
SLIDE     = 15;
// Initialize properties
action  = IDLE;
facing = image_xscale; // Change xscale in editor to adjust initial facing


//DRAWING
// For squash + stretch
xscale = 1;
yscale = 1;

//roating
rotate = 0
slideTime = 0
///////////////////////////////////////////////////////////////////////////////

// Legacy code, haha
sticking = false
prevNextTo = false
teststring = ""
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>lenX = 0;
lenY = 0;

adjust =0;

dir=0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Corpse

if(!happy){
    instance_create(x,y,oDeadGhost);
    audio_play_sound(pop,1,false);
}else{
    laughSound();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Laugh
laughSound();
//alarm[0]=5*room_speed+random_range(0,3*room_speed);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/FreezeCheck
if(scFreezeCheck() == true) exit;
if(scPauseCheck()  == true) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///MOVE
x+=vx;
y+=vy;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/FreezeCheck
if(scFreezeCheck() == true) exit;
if(scPauseCheck()  == true) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Movementv2
// Apply the correct form of acceleration and friction

var tempAccel, tempFric, tempSkid, tempVxMax, tempVyMax;

  
//XMovement
tempAccel = airAccel;
tempFric  = airFric;
tempSkid  = airSkid;
//YMovement
tempYAccel = YAccel;
tempYFric  = YFric;
tempYSkid  = YSkid;



tempVxMax = vxMax+random_range(-vxMax/10,+vxMax/10);
tempVyMax = vyMax+random_range(-vyMax/10,+vyMax/10);


if(damaged){//slow
    tempVxMax = vxMax/2;
    tempVyMax = vyMax/2;
    sprite_index = sGhostHurt;
}
else{
    sprite_index = sGhost;    
}
damaged = false;


/*  This code will smoothly rotate the calling instance to a specified point.*/

var goaldir, spd, dmp, rot;




if(!ambush){
    var targetX = oPlayer.x;
    var targetY = oPlayer.y;
}
else{
    target = instance_create(oPlayer.x+lengthdir_x(70,randomMark),
        oPlayer.y+lengthdir_y(70,randomMark),oGhostMark);
    var targetX = target.x;
    var targetY = target.y;
}

if(place_meeting(x,y,target)){
    ambush=false;
}
goaldir = point_direction(x, y, targetX, targetY);
spd = max(3, 0);
dmp = clamp(.1, 0, 1);

dir -= clamp(angle_difference(dir, goaldir) * dmp, -spd, spd); 
//Smoothly rotate to aim position.

vx = lengthdir_x(1,dir);
vy = lengthdir_y(1,dir);


facing = image_xscale;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///main movement
// Apply the correct form of acceleration and friction
/*
var tempAccel, tempFric, tempSkid, tempVxMax, tempVyMax;

  
//XMovement
tempAccel = airAccel;
tempFric  = airFric;
tempSkid  = airSkid;
//YMovement
tempYAccel = YAccel;
tempYFric  = YFric;
tempYSkid  = YSkid;



tempVxMax = vxMax+random_range(-vxMax/10,+vxMax/10);
tempVyMax = vyMax+random_range(-vyMax/10,+vyMax/10);


if(damaged){//slow
    tempVxMax = vxMax/2;
    tempVyMax = vyMax/2;
    sprite_index = sGhostHurt;
}
else{
    sprite_index = sGhost;    
}

damaged = false;


var lenDX =lengthdir_x(1,point_direction(x,y,oPlayer.x,oPlayer.y));
var lenDY =lengthdir_y(1,point_direction(x,y,oPlayer.x,oPlayer.y));

if(lenDY&gt;0){
    if (vy &lt; 0){
        yspeed = Approach(vy, 0, tempYSkid);   
    }else {
        yspeed = Approach(vy, tempVyMax, tempYAccel);
    }
}
else if(lenDY&lt;0){
    if (vy &gt; 0){
        yspeed = Approach(vy, 0, tempYSkid);   
    }else {
        yspeed = Approach(vy, -tempVyMax, tempYAccel);
    }
}
else{
    vy=0;
}

if(lenDX&gt;0){
    if (vx &lt; 0){
        xspeed = Approach(vx, 0, tempSkid);   
    }else {
        xspeed = Approach(vx, tempVxMax, tempAccel);
    }
}
else if(lenDX&lt;0)
{
    if (vx &gt; 0){
        xspeed = Approach(vx, 0, tempSkid);   
    }else {
        xspeed = Approach(vx, -tempVxMax, tempAccel);
    }
}
else
{
    vx=0;
}

var lenDX =lengthdir_x(xspeed,point_direction(x,y,oPlayer.x,oPlayer.y));
var lenDY =lengthdir_y(yspeed,point_direction(x,y,oPlayer.x,oPlayer.y));

vx = lenDX;
vy = lenDY;






facing = image_xscale;
// Ghost Float
/*
var yPdir = oPlayer.y-y;

if(abs(yPdir)&lt;3){
    //yPdir = 0;
}


if(yPdir&gt;0){
    if (vy &lt; 0){
        vy = Approach(vy, 0, tempYSkid);   
    }else {
        vy = Approach(vy, tempVyMax, tempYAccel);
    }
}
else if(yPdir&lt;0)
{
    if (vy &gt; 0){
        vy = Approach(vy, 0, tempYSkid);   
    }else {
        vy = Approach(vy, -tempVyMax, tempYAccel);
    }
}
else
{
    vy=0;
}

var xPdir = oPlayer.x-x;


if(abs(xPdir)&lt;3){
    xPidr = 0;
}

if(xPdir&gt;0){
    if (vx &lt; 0){
        vx = Approach(vx, 0, tempSkid);   
    }else {
        vx = Approach(vx, tempVxMax, tempAccel);
    }
}
else if(xPdir&lt;0)
{
    if (vx &gt; 0){
        vx = Approach(vx, 0, tempSkid);   
    }else {
        vx = Approach(vx, -tempVxMax, tempAccel);
    }
}
else
{
    vx=0;
}

facing = image_xscale;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death?
if(hp&lt;=0)
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sprite
if(x&gt;oPlayer.x){
    image_xscale=-1;
}else{
    image_xscale=1;
}

draw_sprite_ext(sprite_index,image_index,x,y
    ,image_xscale,image_yscale,image_angle,0,1);

if(sprite_index=sGhost){
    draw_sprite_ext(sprite_index,image_index,x,y
        ,image_xscale,image_yscale,image_angle,c_white,illumination);
    if(ambush){
        draw_sprite_ext(sprite_index,image_index,x,y
            ,image_xscale,image_yscale,image_angle,c_green,1);
        }
}else{
    draw_sprite_ext(sprite_index,image_index,x,y
        ,image_xscale,image_yscale,image_angle,c_white,1);   
}

draw_set_font(smallDebug);

draw_text(x,y-20,round(lenX*10)/10)
draw_text(x,y-40,round(lenY*10)/10)
 
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
