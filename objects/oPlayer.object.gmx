<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sSwordsman</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-50</depth>
  <persistent>0</persistent>
  <parentName>oParEntity</parentName>
  <maskName>sPlayer</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables
roomChanging=false;
rcVX=0;
rcVY=0;


sword=true;
wack=false;
wackO=noone;
swordBBOX = bbox_right;

arrow=noone;

busy=false;
angle = 0;

gamepad  = false;
keyboard = false;

click = false;
clickOne = false;
clickTwo = false;

image_speed = 2;


skid=sPlayerSkid;
run =sPlayerRun;
pickup=0;
drop=0;
hurt = false;
global.freeze =false;
global.paused =false;
// Inherit Entity
event_inherited();
i=0;
facing = 1;
facingY= 1;
o = false;
// Movement ///////////////////////////////////////////////////////////////////
slope       = 0   ;
groundAccel = 0.5;
dSlopeAccel = 1/8 ;
vxAccelSlide= 1/8 ;
groundFric  = 0.25;
groundSkid  = 2.0;
airAccel    = 1/15;
airFric     = 0.00;
airSkid     = 1/8 ;
vxMax       = 2.0;
vxMaxSprint = 2.5;
vxMaxUp     = 2.50;
vxMaxSlide  = 3+15/16;
vyMax       = 2.0;
jumpHeight  = 9.00;
gravNorm    = 5/16;
walk        = false;
slide       = false;


gravSlide   = 2.5/16; 
clingTime   = 4.0;
// Misc ///////////////////////////////////////////////////////////////////////
sprint = 0;
sprintTimer = false;
fly=false;
flytimer=false;
state = scMovement;
// Actions
IDLE      = 10;
RUN       = 11;
JUMP      = 12;
SKID      = 13;
SPRINT    = 14;
SLIDE     = 15;
HURT      = 16;
DUCK      = 17;
// Initialize properties
action  = IDLE;
facing = image_xscale; // Change xscale in editor to adjust initial facing

//Powerups
walljump = false

//DRAWING
// For squash + stretch
xscale = 1;
yscale = 1;

//roating
rotate = 0;
slideTime = 0;
slopeD=0;
slopeDprev=0;
///////////////////////////////////////////////////////////////////////////////

//falling
slowedFall=false;
spinAttack = false;

// Legacy code, haha
sticking = false
prevNextTo = false
teststring = ""


//Spin
dam=false;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>oPlayerStats.hp=3;
room_speed=10;
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Damage Freeze
global.freeze = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///invincability frames
hurt = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///busy
busy=false
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/FreezeCheck
if(scFreezeCheck() == true) exit;
if(scPauseCheck()  == true) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement with collision
// Handle sub-pixel movement
cx += vx;
cy += vy;
vxNew = round(cx);
vyNew = round(cy);
cx -= vxNew;
cy -= vyNew;

jumped = false;
landed = false;

//verticle movement
repeat(abs(vyNew)) {
    if (!PlatformCheck()){
        scPlayerHitCheck();
        y += sign(vy);
    } else {
        vy = 0;
        onGround = true;
        break;
    }
}

if (platformTarget) {
    if (!onGround)
        landed = true;
    
    if (landed)
        with (platformTarget) other.vy = 0;
    else
        with (platformTarget) other.vy = 0;
}

//x movement as well as handling slopes
r=0;
q=0;
var shell;
repeat(abs(vxNew)) {
    //var w=0, e=0;
    moved = false;
    q = sign(vx);
    while (abs(q) != 2){
        r = 3;
        repeat(6){
            if (!place_meeting(x+q,y+r,oParSolid)){
            //only move if place is free
                if (r &lt;= 0 || place_meeting(x,y+1,oParSolid)){
                //if onground or slope goes up moves 
                    scPlayerCollision();//better collison that works OMG!
                    x += q;
                    y += r;
                    w += 1;
                    e -= r;
                    moved = true;
                    break;
                } 
            } 
            r -= 1;
        }
    q += sign(vx);
    }
    if (!moved){
        vx = 0;
        break;
    }
}

if (w&gt;=5) {
    slope = round(e/abs(w)*2)/2 ;
    w=0;
    e=0;
};

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Death

// Crushed by moving solid/
if (place_meeting(x, y, oParSolid)) instance_destroy();

//hp==0
if(oPlayerStats.hp&lt;=0&amp;&amp;global.freeze==false)
    instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Procedural Animation

//xscale = Approach(xscale, 1, 0.05);
//yscale = Approach(yscale, 1, 0.05);

xscale = 1;
yscale = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/FreezeCheck
if(scFreezeCheck() == true) exit;
if(scPauseCheck()  == true) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation
event_inherited();

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/FreezeCheck
if(scFreezeCheck() == true) exit;
if(scPauseCheck()  == true) exit;
//show_message(object_index);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///State switch
script_execute(state);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Wack
if(scInInventory("sword")){
    if(kActionPress &amp;&amp; !instance_exists(wackO) &amp;&amp; !busy){
        wackO = instance_create(x+facing*8,y+8*facingY,oWack);
        wackO.image_angle = (angle+270)%360;
        busy=true;
        alarm[0]=20;
    }
} 
else {
    wack =false;
}

if(instance_exists(wackO)){
   wack=true;
}else{
   wack=false;
}

if(scInInventory("bow")&amp;&amp;oPlayerStats.arrows&gt;0){
    if(k2ActionPress &amp;&amp; !busy){
        busy=true;
        alarm[0]=20;
        oPlayerStats.arrows--;
        var arrow = instance_create(x+facing*8,y+8*facingY,oArrow);
        arrow.image_angle = (angle+270)%360;
        arrow.facing = facing;
        arrow.facingY = facingY;
    }
}

if(scInInventory("bomb")&amp;&amp;oPlayerStats.bombs&gt;0){
    if(k3ActionPress &amp;&amp; !busy){
        busy=true;
        alarm[0]=10;
        oPlayerStats.bombs--;
        var bomb = instance_create(x,y,oBomb);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Room Change
if(!scPlayerInRoom()&amp;&amp;!roomChanging){
    roomChanging=true;
    var disLeft  = point_distance(x,y,view_xview,y);
    var disRight = point_distance(x,y,view_xview+view_wview,y);
    var disUp    = point_distance(x,y,x,view_yview);
    var disDown  = point_distance(x,y,x,view_yview+view_hview);

    var minDis = min(disLeft,disRight,disUp,disDown);

    rcVX=0;
    rcVY=0;
    if(minDis==disLeft){
        rcVX=-1;
    }else if(minDis==disRight){
        rcVX=1;
    }else if(minDis==disUp){
        rcVY=-1;
    }else if(minDis==disDown){
        rcVY=1;
    }
}else if(!scPlayerInRoom()){
    vx=rcVX*vxMax;
    vy=rcVY*vyMax;
}else if(roomChanging){
    var x1 = floor(x / view_wview) * view_wview+32;
    var y1 = floor(y / view_hview) * view_hview+32;
    if(!position_meeting(x1,y1,oDirector)){
        instance_create(x1,y1,oDirector);
    }
    roomChanging=false;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Splosh
if(position_meeting(x,y,oWater)){
    scPlDamage(1);
    x= lastX
    y= lastY
}else if(point_distance(x,y,oWater.x,oWater.y)&gt;32){
    lastX = x;
    lastY = y;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oOrbR">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>instance_destroy(other);
audio_play_sound(ding,2,false);

        oPlayerStats.maxhp=min(oPlayerStats.maxhp+1,8);
        oPlayerStats.hp=oPlayerStats.maxhp;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oSword">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!scInInventory("sword")){
    ds_list_add(oPlayerStats.inventory,"sword");
    audio_play_sound(ding,2,false);
    instance_destroy(other);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oParEnemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit check

var above = place_meeting(x,y+1,oParEnemy)&amp;&amp; !place_meeting(x,y,oParEnemy);
var falling = vy&gt;0;

if(!hurt&amp;&amp;other.dangerous){
    scPlDamage(1);
    var dir = point_direction(x,y,other.x,other.y);
    vx=lengthdir_x(3,(dir+180)%360);
    vy=lengthdir_y(3,(dir+180)%360);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!scInInventory("bow")&amp;&amp;oPlayerStats.coins-other.cost&gt;=0){
    audio_play_sound(ding,2,false);
    oPlayerStats.coins-=other.cost;
    ds_list_add(oPlayerStats.inventory,"bow");
    instance_destroy(other);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oBombDrop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(oPlayerStats.coins-other.cost&gt;=0
    &amp;&amp; oPlayerStats.bombs+1&lt;=22 ){
        audio_play_sound(ding,2,false);
        oPlayerStats.coins-=other.cost;
        oPlayerStats.bombs=min(oPlayerStats.bombs+1,22);
        instance_destroy(other);
}

if(!scInInventory("bomb")){
    ds_list_add(oPlayerStats.inventory,"bomb");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oArrowDrop">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(oPlayerStats.coins-other.cost&gt;=0
    &amp;&amp; oPlayerStats.arrows+1&lt;=99 ){
        audio_play_sound(ding,2,false);
        oPlayerStats.coins-=other.cost;
        oPlayerStats.arrows=Approach(oPlayerStats.arrows,99,5);
        instance_destroy(other);
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oHeart">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///heal
if(oPlayerStats.coins-other.cost&gt;=0
    &amp;&amp; oPlayerStats.hp+1&lt;=oPlayerStats.maxhp ){
        oPlayerStats.coins-=other.cost;
        oPlayerStats.hp = min(oPlayerStats.hp+1,oPlayerStats.maxhp);
        audio_play_sound(ding,2,false);
        instance_destroy(other);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oGoldHeart">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///heal
if(oPlayerStats.coins-other.cost&gt;=0
    &amp;&amp; (oPlayerStats.hp&lt;oPlayerStats.maxhp 
    || oPlayerStats.maxhp&lt;8)){
        audio_play_sound(ding,2,false);
        oPlayerStats.coins-=other.cost;
        oPlayerStats.maxhp=min(oPlayerStats.maxhp+1,8);
        oPlayerStats.hp=oPlayerStats.maxhp;
        instance_destroy(other);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="oCoin">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///coin


with (other){instance_destroy()};
oPlayerStats.coins = min(oPlayerStats.coins + 5,99);


if(instance_exists(oDark)){
    global.light = min(100,global.light+10);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Keyboard/Gamepad check
var tkeyboard = 
keyboard_check(vk_left)           
|| keyboard_check(ord("A"))
|| keyboard_check(vk_right)          
|| keyboard_check(ord("D"))
|| keyboard_check(vk_up)             
|| keyboard_check_pressed(ord('X'))  
|| keyboard_check_pressed(ord("W"))
||keyboard_check(ord('Z'))          
|| keyboard_check(vk_space)
||keyboard_check_released(ord('Z')) 
|| keyboard_check_released(vk_space)
||keyboard_check_pressed(ord('Z')) 
||mouse_check_button(mb_left)
||mouse_check_button(mb_right);



var tgamepad = 
gamepad_axis_value(0, gp_axislv) &lt; -0.40
||gamepad_axis_value(0, gp_axislh) &gt;  0.40
||gamepad_axis_value(0, gp_axislh) &lt; -0.40
||gamepad_button_check_pressed(0, gp_face1)
||gamepad_button_check_released(0, gp_face1)
||gamepad_button_check_released(0, gp_face1)
||gamepad_button_check_pressed(0, gp_face2)
||gamepad_button_check(0,gp_shoulderrb)
||gamepad_button_check(0,gp_shoulderlb);

if(tkeyboard){
    keyboard = true;
    gamepad = false;
}else if(tgamepad){
    keyboard = false;
    gamepad = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Mouse Draw
/*
if(gamepad){
    var lenX = oVirMouse.x;
}
else{
    var lenX = mouse_x;
}

if(lenX&lt;x &amp;&amp; click){
    facing = -1;
}
else if (click){
    facing =  1;   
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw Self
///Max Speed
color = c_white;

image_speed = 0;

if(!hurt){
    flash=1;
}else{
    if(alarm[2]%5==0){
        flash=(flash+1)%2;
    }
}

draw_sprite_ext(sSwordsman, angle/90, x, y, 1.2, 1.2, 0, c_white, flash);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/FreezeCheck
if(scFreezeCheck() == true) exit;
if(scPauseCheck()  == true) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///drawroom
/*
var x1 = floor(x / view_wview) * view_wview+16
var y1 = floor(y / view_hview) * view_hview+16
var x2 = x1+view_wview-32;
var y2 = y1+view_hview-32;

draw_rectangle(x1, y1,x2, y2,true);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>0,0</point>
    <point>32,0</point>
    <point>32,32</point>
    <point>0,32</point>
  </PhysicsShapePoints>
</object>
