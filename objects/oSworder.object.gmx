<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sAttacker</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-20</depth>
  <persistent>0</persistent>
  <parentName>oParEnemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variables

event_inherited();


target=oPlayer;

image_speed = 2;

dangerous=true;
ledgeTurnAround=false;
hp=50//100+random_range(-20,20);

damaged=false;

// Inherit Entity
event_inherited();
dir = -1;
facing = 1;

hit = false;
// Movement ///////////////////////////////////////////////////////////////////

airAccel    = 0.50;
airFric     = 0.00;
airSkid     = 0.00;
vxMax       = 5.00;

YAccel =  airAccel;
YFric  =  airFric;
YSkid  =  airSkid;
vyMax  =  vxMax;


slope       = 0   ;
groundAccel = 2.5;
dSlopeAccel = 1/8 ;
vxAccelSlide= 1/8 ;
groundFric  = 1/15;
groundSkid  = 2.5 ;

vxMaxSprint = 1.5;
vxMaxUp     = 2.50;
vxMaxSlide  = 3+15/16;
jumpHeight  = 9.00;
gravNorm    = 5/16;
walk        = false;
slide       = false;


gravSlide   = 2.5/16; 
clingTime   = 4.0;
// Misc ///////////////////////////////////////////////////////////////////////
sprint = 0;
sprintTimer = false;
state = scRight;
// Actions
IDLE      = 10;
RUN       = 11;
JUMP      = 12;
SKID      = 13;
SPRINT    = 14;
SLIDE     = 15;
// Initialize properties
action  = IDLE;
facing = image_xscale; // Change xscale in editor to adjust initial facing


//DRAWING
// For squash + stretch
xscale = 1;
yscale = 1;

//roating
rotate = 0
slideTime = 0
///////////////////////////////////////////////////////////////////////////////

// Legacy code, haha
sticking = false
prevNextTo = false
teststring = ""
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path = path_add();

pos =1;

xx= path_get_point_x(path,pos);
yy= path_get_point_y(path,pos);

pMov=true;

spd=.75;

wack=true;
alarm0=false;
wackO=noone;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>path_delete(path);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Corpse
instance_create(x,y,oDeadGhost);
audio_play_sound(pop,1,false);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alarm0=false;
wack=false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/FreezeCheck
if(scFreezeCheck() == true) exit;
if(scPauseCheck()  == true) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if player is in room
if(!scInView()){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Pause/FreezeCheck
if(scFreezeCheck() == true) exit;
if(scPauseCheck()  == true) exit;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if player is in room
if(!scInView()){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main Movementv3
// Apply the correct form of acceleration and friction

var tempAccel, tempFric, tempSkid, tempVxMax, tempVyMax;

//Wack
if(distance_to_object(oPlayer)&lt;20){
    spd=0.01;
}

if(distance_to_object(oPlayer)&lt;20&amp;&amp;!wack){
    wackO = instance_create(x+lengthdir_x(8,direction),
                                y+lengthdir_y(8,direction),oWackE);
    wackO.image_angle = (direction+270)%360;
    wackO.me = id;
}

if(instance_exists(wackO)){
   wack=true;
   spd=0.01;
}else if(!alarm0){
    alarm0=true
    alarm[0]=60;
}

// Update

if (pMov) {
    path_start(path, spd, path_action_continue, 0);
}
image_angle = direction;

scr_Define_Path(path);

if(damaged){//slow
    spd/=2;
}else{
    spd=.75;
}
damaged = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death?
if(hp&lt;=0)
instance_destroy();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Check if player is in room
if(!scInView()){
    exit;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sprite
draw_self();
draw_path(path,x,y,true);
/*
draw_set_colour(c_red);
draw_line(x-8,y,target.x-8,target.y);
draw_line(x+8,y,target.x+8,target.y);
draw_line(x,y-8,target.x,target.y-8);
draw_line(x,y+8,target.x,target.y+8);
/*
if(x&gt;oPlayer.x){
    image_xscale=-1;
}else{
    image_xscale=1;
}

draw_sprite_ext(sprite_index,image_index,x,y
    ,image_xscale,image_yscale,image_angle,0,1);

if(sprite_index=sGhost){
    draw_sprite_ext(sprite_index,image_index,x,y
        ,image_xscale,image_yscale,image_angle,c_white,illumination);
    if(foundPartner){
    draw_sprite_ext(sprite_index,image_index,x,y
        ,image_xscale,image_yscale,image_angle,c_blue,1);
        if(ambush){
        draw_sprite_ext(sprite_index,image_index,x,y
            ,image_xscale,image_yscale,image_angle,c_green,1);
        }
    }
}else{
    draw_sprite_ext(sprite_index,image_index,x,y
        ,image_xscale,image_yscale,image_angle,c_white,1);   
}

draw_set_font(smallDebug);

draw_text(x,y-20,round(lenX*10)/10)
draw_text(x,y-40,round(lenY*10)/10)
 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>721</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_health</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>hp</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>723</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_draw_health</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>x-9</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>y-16</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>x+12</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>y-16</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
