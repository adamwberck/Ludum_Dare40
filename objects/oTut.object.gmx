<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>start = false;
wasd = false;
jump  = false;
click1  = false;
click2 = false;
click3  = false;
ghost1  = false;
ghost2 = false;
find1 = false;
find2 = false;
hint1 = false;

alarm0=false;
alarm1=false;
alarm2=false;
alarm3=false;
alarm4=false;
alarm5=false;
alarm6=false;
alarm7=false;
alarm8=false;
alarm9=false;

ghostCreated = false;


bat1 = instance_create(80,272,oBattery);
bat2 = instance_create(544,272,oBattery);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(start){
    //turn on wasd
    wasd = true;
    start=false;
}
else if(wasd){
    //turn off wasd turn on jump
    wasd = false;
    jump = true;
}
else if(jump){
    //turn off jump turn on click
    jump   = false;
    click1 = true;
}
else if(click1){
    //turn off click1 turn on click2
    click1 = false;
    click2 = true;
}
else if(click2){
    //turn off click2 turn on click3
    click2 = false;
    click3 = true;
}
else if(click3){
    //turn off click3 turn on ghost1
    click3 = false;
    ghost1 = true;
}
else if(ghost1){
    //turn off ghost1 and turn on ghost2
    ghost1 = false;
    ghost2 = true;    
}
else if(ghost2){
    //turn off ghost2 turn on find1
    ghost2 = false;
    find1 = true;        
}
else if(find1){
    //turn off find1 turn on find2
    find1 = false;
    find2 = true;    
}
else if(find2){
    //turn off find1 turn on hint1
    find2 = false;
    hint1 = true;    
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(!alarm0) then start = !oGame.roomStart;

var kLeft         = keyboard_check(vk_left)           || gamepad_axis_value(0, gp_axislh) &lt; -0.40 || keyboard_check(ord("A"));
var kRight        = keyboard_check(vk_right)          || gamepad_axis_value(0, gp_axislh) &gt;  0.40 || keyboard_check(ord("D"));
var kJump         = keyboard_check_pressed(ord('X'))  || gamepad_button_check_pressed(0, gp_face1)  || keyboard_check_pressed(ord("W"))  ||keyboard_check_pressed(vk_up)
                    || keyboard_check_released(ord('X')) || gamepad_button_check_released(0, gp_face1) || keyboard_check_released(ord("W")) ||keyboard_check_released(vk_up)
                    || keyboard_check(ord('X'))          || gamepad_button_check(0, gp_face1)          || keyboard_check(ord("W"))          ||keyboard_check(vk_up);
                    
var clickOne      = mouse_check_button(mb_left) || gamepad_button_check(0,gp_shoulderrb);
var clickTwo      = mouse_check_button(mb_right)|| gamepad_button_check(0,gp_shoulderlb);


var movePlayer  = kLeft || kRight || kJump;
var jumpPlayer  = kJump;
var clickPlayer = clickOne || clickTwo;


if(instance_exists(oPlayer)){
    draw_set_font(font2);

    var tutLocX = room_width/2;
    var tutLocY = 100;
    if(!alarm0 &amp;&amp; start){
        alarm[0] = 90;//turn on wasd
        alarm0 = true;
    }
    else if(wasd){
        draw_text(tutLocX,tutLocY,"Use the 'WASD' or the arrow keys to move")
        draw_text(tutLocX,tutLocY+20,"Gamepad works too.")
        if(movePlayer){
            if(!alarm1){
                alarm1=true;
                alarm[0] = 90;//turn off wasd turn on jump
            }
        }
    }
    else if(jump){
        draw_text(tutLocX,tutLocY,"The 'W', 'Up' or the 'A' button on the gamepad jumps.")
        if(jumpPlayer){
            if(!alarm2){
                alarm2=true;
                alarm[0] = 90;//turn off jump turn on click
            }
        }
    }
    else if(click1){
        draw_text(tutLocX,tutLocY-20,"The Left Click or Right Trigger shines your flashlight");
        draw_text(tutLocX,tutLocY,"Use your mouse or the right stick to aim the light");
        draw_text(tutLocX,tutLocY+20,"Careful you only have so much battery life")
        if(clickOne){
            if(!alarm3){
                alarm3=true;
                alarm[0] = 150;//turn off click1 turn on click2
            }
        }
    }
    else if(click2){
        draw_text(tutLocX,tutLocY,"You can collect batteries to recharge");
        draw_text(tutLocX,tutLocY+20,"Use the silhouttes to find them");
        if(!instance_exists(bat1)){
            if(!alarm4){
                alarm4=true;
                alarm[0] = 120;//turn off click2 turn on click3
            }
        }
    }
    else if(click3){
        draw_text(tutLocX,tutLocY,"Somethings are hidden in the dark");
        draw_text(tutLocX,tutLocY+20,"Use the flashlight to find them");
        if(!instance_exists(bat2)){
            if(!alarm5){
                alarm5=true;
                alarm[0] = 120;//turn off click3 turn on ghost1
            }
        }
    }
    else if(ghost1){
        draw_text(tutLocX,tutLocY-20,"Ghosts hide in the dark!");
        draw_text(tutLocX,tutLocY,"Use the left click to find them");
        draw_text(tutLocX,tutLocY+20,"And use right click or Left Trigger to defeat them.");
        if(!ghostCreated){
            ghostCreated = true;
            instance_create(50,room_height-100,oGhost01);
        }
        if(clickTwo){
            if(!alarm6){
                alarm6=true;
                alarm[0] = 160;//turn off ghost1 and turn on ghost2
            }
        }
    }
    else if(ghost2){
        draw_text(tutLocX,tutLocY,"Careful with the yellow light it uses more energy");
        if(!ghostCreated){
            ghostCreated = true;
            instance_create(50,room_height-100,oGhost01);
        }
        if(ghostCreated &amp;&amp; !instance_exists(oGhost01)){
            if(!alarm7){
                alarm7=true;
                alarm[0] = 120;//turn off ghost2 turn on find1
            }
        }
    }
    else if(find1){
        draw_text(tutLocX,tutLocY,"Finally, you can use the flashlight to find platforms");
        draw_text(tutLocX,tutLocY+20,"Look around to see if you can find it");
        if(oPlayer.y&lt;288&amp;&amp;oPlayer.x&gt;176&amp;&amp;oPlayer.x&lt;256){
            if(!alarm8){
                alarm8=true;
                alarm[0] = 120;//turn off find1 turn on find2
            }
        }
    }
    else if(find2){
        draw_text(tutLocX,tutLocY,"To go to the next level touch a star");
        if(!alarm9){
            alarm9=true;
            alarm[0] = 60*room_speed;//turn off find1 turn on hint1
        }
    }
    else if(hint1){
        draw_text(tutLocX,tutLocY,"Can't find it?");
        draw_text(tutLocX,tutLocY-20,"Look above the window third from the right");
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
